//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPX.v1_1 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// 
    ///		GPX documents contain a metadata header, followed by waypoints, routes, and tracks.  You can add your own elements
    ///		to the extensions section of the GPX document.
    ///	  
    /// </para>
    /// <para>
    /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
    /// </para>
    /// </summary>
    public partial class gpxType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<wptType> wptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rteType> rteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<trkType> trkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string versionFixedValue = "1.1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator gpxType(XElement xe) { return XTypedServices.ToXTypedElement<gpxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static gpxType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("metadata", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("wpt", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("rte", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("trk", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		GPX documents contain a metadata header, followed by waypoints, routes, and tracks.  You can add your own elements
        ///		to the extensions section of the GPX document.
        ///	  
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public gpxType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Metadata about the file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual metadataType metadata {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("metadata", "http://www.topografix.com/GPX/1/1"));
                return ((metadataType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("metadata", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A list of waypoints.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<wptType> wpt {
            get {
                if ((this.wptField == null)) {
                    this.wptField = new XTypedList<wptType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("wpt", "http://www.topografix.com/GPX/1/1"));
                }
                return this.wptField;
            }
            set {
                if ((value == null)) {
                    this.wptField = null;
                }
                else {
                    if ((this.wptField == null)) {
                        this.wptField = XTypedList<wptType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("wpt", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<wptType>(this.wptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A list of routes.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<rteType> rte {
            get {
                if ((this.rteField == null)) {
                    this.rteField = new XTypedList<rteType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("rte", "http://www.topografix.com/GPX/1/1"));
                }
                return this.rteField;
            }
            set {
                if ((value == null)) {
                    this.rteField = null;
                }
                else {
                    if ((this.rteField == null)) {
                        this.rteField = XTypedList<rteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("rte", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<rteType>(this.rteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A list of tracks.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<trkType> trk {
            get {
                if ((this.trkField == null)) {
                    this.trkField = new XTypedList<trkType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("trk", "http://www.topografix.com/GPX/1/1"));
                }
                return this.trkField;
            }
            set {
                if ((value == null)) {
                    this.trkField = null;
                }
                else {
                    if ((this.trkField == null)) {
                        this.trkField = XTypedList<trkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("trk", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<trkType>(this.trkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You can add extend GPX by adding your own elements from another schema here.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual extensionsType extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"));
                return ((extensionsType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You must include the version number in your GPX document.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return versionFixedValue;
            }
            set {
                if (value.Equals(versionFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, versionFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You must include the name or URL of the software that created your GPX document.  This allows others to
        ///		inform the creator of a GPX instance document that fails to validate.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string creator {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("creator", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("creator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("gpxType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<gpxType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("metadata", "http://www.topografix.com/GPX/1/1"), typeof(metadataType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("wpt", "http://www.topografix.com/GPX/1/1"), typeof(wptType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("rte", "http://www.topografix.com/GPX/1/1"), typeof(rteType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("trk", "http://www.topografix.com/GPX/1/1"), typeof(trkType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), typeof(extensionsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		Information about the GPX file, author, and copyright restrictions goes in the metadata section.  Providing rich,
    ///		meaningful information about your GPX files allows others to search for and use your GPS data.
    ///	  
    /// </para>
    /// <para>
    /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
    /// </para>
    /// </summary>
    public partial class metadataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkType> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator metadataType(XElement xe) { return XTypedServices.ToXTypedElement<metadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static metadataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("author", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("copyright", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("keywords", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("bounds", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Information about the GPX file, author, and copyright restrictions goes in the metadata section.  Providing rich,
        ///		meaningful information about your GPX files allows others to search for and use your GPS data.
        ///	  
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public metadataType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The name of the GPX file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A description of the contents of the GPX file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The person or organization who created the GPX file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual personType author {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("author", "http://www.topografix.com/GPX/1/1"));
                return ((personType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("author", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Copyright and license information governing use of the file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual copyrightType copyright {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("copyright", "http://www.topografix.com/GPX/1/1"));
                return ((copyrightType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("copyright", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		URLs associated with the location described in the file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XTypedList<linkType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XTypedList<linkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<linkType>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The creation date of the file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<System.DateTime> time {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Keywords associated with the file.  Search engines or databases can use this information to classify the data.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual string keywords {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("keywords", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("keywords", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Minimum and maximum coordinates which describe the extent of the coordinates in the file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual boundsType bounds {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("bounds", "http://www.topografix.com/GPX/1/1"));
                return ((boundsType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("bounds", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You can add extend GPX by adding your own elements from another schema here.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, desc?, author?, copyright?, link*, time?, keywords?, bounds?, extensions?)
        /// </para>
        /// </summary>
        public virtual extensionsType extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"));
                return ((extensionsType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("metadataType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<metadataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("author", "http://www.topografix.com/GPX/1/1"), typeof(personType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("copyright", "http://www.topografix.com/GPX/1/1"), typeof(copyrightType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"), typeof(linkType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("keywords", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bounds", "http://www.topografix.com/GPX/1/1"), typeof(boundsType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), typeof(extensionsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		wpt represents a waypoint, point of interest, or named feature on a map.
    ///	  
    /// </para>
    /// <para>
    /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
    /// </para>
    /// </summary>
    public partial class wptType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkType> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator wptType(XElement xe) { return XTypedServices.ToXTypedElement<wptType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static wptType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("magvar", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("geoidheight", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("sym", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("fix", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("sat", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("hdop", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("vdop", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("pdop", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ageofdgpsdata", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("dgpsid", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		wpt represents a waypoint, point of interest, or named feature on a map.
        ///	  
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public wptType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Elevation (in meters) of the point.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> ele {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Creation/modification timestamp for element. Date and time in are in Univeral Coordinated Time (UTC), not local time! Conforms to ISO 8601 specification for date/time representation. Fractional seconds are allowed for millisecond timing in tracklogs. 
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<System.DateTime> time {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Magnetic variation (in degrees) at the point
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> magvar {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("magvar", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("magvar", "http://www.topografix.com/GPX/1/1"), value, "magvar", global::GPX.v1_1.degreesType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Height (in meters) of geoid (mean sea level) above WGS84 earth ellipsoid.  As defined in NMEA GGA message.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> geoidheight {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("geoidheight", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("geoidheight", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			The GPS name of the waypoint. This field will be transferred to and from the GPS. GPX does not place restrictions on the length of this field or the characters contained in it. It is up to the receiving application to validate the field before sending it to the GPS.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			GPS waypoint comment. Sent to GPS as comment. 
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual string cmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			A text description of the element. Holds additional information about the element intended for the user, not the GPS.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Source of data. Included to give user some idea of reliability and accuracy of data.  "Garmin eTrex", "USGS quad Boston North", e.g.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual string src {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Link to additional information about the waypoint.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XTypedList<linkType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XTypedList<linkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<linkType>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Text of GPS symbol name. For interchange with other programs, use the exact spelling of the symbol as displayed on the GPS.  If the GPS abbreviates words, spell them out.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual string sym {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("sym", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("sym", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Type (classification) of the waypoint.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Type of GPX fix.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual string fix {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("fix", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("fix", "http://www.topografix.com/GPX/1/1"), value, "fix", global::GPX.v1_1.fixType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Number of satellites used to calculate the GPX fix.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> sat {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("sat", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("sat", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Horizontal dilution of precision.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> hdop {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("hdop", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("hdop", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Vertical dilution of precision.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> vdop {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("vdop", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("vdop", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Position dilution of precision.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> pdop {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("pdop", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("pdop", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Number of seconds since last DGPS update.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> ageofdgpsdata {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ageofdgpsdata", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ageofdgpsdata", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			ID of DGPS station used in differential correction.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> dgpsid {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("dgpsid", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("dgpsid", "http://www.topografix.com/GPX/1/1"), value, "dgpsid", global::GPX.v1_1.dgpsStationType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You can add extend GPX by adding your own elements from another schema here.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?, magvar?, geoidheight?, name?, cmt?, desc?, src?, link*, sym?, type?, fix?, sat?, hdop?, vdop?, pdop?, ageofdgpsdata?, dgpsid?, extensions?)
        /// </para>
        /// </summary>
        public virtual extensionsType extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"));
                return ((extensionsType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The latitude of the point.  This is always in decimal degrees, and always in WGS84 datum.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal lat {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("lat", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("lat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      The longitude of the point.  This is always in decimal degrees, and always in WGS84 datum.
        ///    
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal lon {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("lon", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("lon", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("wptType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<wptType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("magvar", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geoidheight", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"), typeof(linkType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sym", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fix", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sat", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("hdop", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("vdop", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("pdop", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ageofdgpsdata", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dgpsid", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), typeof(extensionsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		rte represents route - an ordered list of waypoints representing a series of turn points leading to a destination.
    ///	  
    /// </para>
    /// <para>
    /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
    /// </para>
    /// </summary>
    public partial class rteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkType> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<wptType> rteptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator rteType(XElement xe) { return XTypedServices.ToXTypedElement<rteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static rteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("rtept", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		rte represents route - an ordered list of waypoints representing a series of turn points leading to a destination.
        ///	  
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public rteType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			GPS name of route.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			GPS comment for route.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual string cmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Text description of route for user.  Not sent to GPS.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Source of data. Included to give user some idea of reliability and accuracy of data.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual string src {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Links to external information about the route.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XTypedList<linkType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XTypedList<linkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<linkType>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			GPS route number.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> number {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Type (classification) of route.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You can add extend GPX by adding your own elements from another schema here.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual extensionsType extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"));
                return ((extensionsType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A list of route points.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, rtept*)
        /// </para>
        /// </summary>
        public virtual IList<wptType> rtept {
            get {
                if ((this.rteptField == null)) {
                    this.rteptField = new XTypedList<wptType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("rtept", "http://www.topografix.com/GPX/1/1"));
                }
                return this.rteptField;
            }
            set {
                if ((value == null)) {
                    this.rteptField = null;
                }
                else {
                    if ((this.rteptField == null)) {
                        this.rteptField = XTypedList<wptType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("rtept", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<wptType>(this.rteptField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("rteType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<rteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"), typeof(linkType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), typeof(extensionsType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("rtept", "http://www.topografix.com/GPX/1/1"), typeof(wptType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		trk represents a track - an ordered list of points describing a path.
    ///	  
    /// </para>
    /// <para>
    /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
    /// </para>
    /// </summary>
    public partial class trkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkType> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<trksegType> trksegField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator trkType(XElement xe) { return XTypedServices.ToXTypedElement<trkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static trkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("trkseg", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		trk represents a track - an ordered list of points describing a path.
        ///	  
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public trkType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			GPS name of track.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			GPS comment for track.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual string cmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			User description of track.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Source of data. Included to give user some idea of reliability and accuracy of data.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual string src {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Links to external information about track.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XTypedList<linkType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XTypedList<linkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<linkType>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			GPS track number.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> number {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///			Type (classification) of track.
        ///		  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You can add extend GPX by adding your own elements from another schema here.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual extensionsType extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"));
                return ((extensionsType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A Track Segment holds a list of Track Points which are logically connected in order. To represent a single GPS track where GPS reception was lost, or the GPS receiver was turned off, start a new Track Segment for each continuous span of track data.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name?, cmt?, desc?, src?, link*, number?, type?, extensions?, trkseg*)
        /// </para>
        /// </summary>
        public virtual IList<trksegType> trkseg {
            get {
                if ((this.trksegField == null)) {
                    this.trksegField = new XTypedList<trksegType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("trkseg", "http://www.topografix.com/GPX/1/1"));
                }
                return this.trksegField;
            }
            set {
                if ((value == null)) {
                    this.trksegField = null;
                }
                else {
                    if ((this.trksegField == null)) {
                        this.trksegField = XTypedList<trksegType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("trkseg", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<trksegType>(this.trksegField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("trkType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<trkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("cmt", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("desc", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("src", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"), typeof(linkType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("number", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), typeof(extensionsType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("trkseg", "http://www.topografix.com/GPX/1/1"), typeof(trksegType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 You can add extend GPX by adding your own elements from another schema here.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class extensionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator extensionsType(XElement xe) { return XTypedServices.ToXTypedElement<extensionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extensionsType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///	 You can add extend GPX by adding your own elements from another schema here.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public extensionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("extensionsType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extensionsType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##other", "http://www.topografix.com/GPX/1/1"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    /// 	 A Track Segment holds a list of Track Points which are logically connected in order. To represent a single GPS track where GPS reception was lost, or the GPS receiver was turned off, start a new Track Segment for each continuous span of track data.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (trkpt*, extensions?)
    /// </para>
    /// </summary>
    public partial class trksegType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<wptType> trkptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator trksegType(XElement xe) { return XTypedServices.ToXTypedElement<trksegType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static trksegType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("trkpt", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        /// 	 A Track Segment holds a list of Track Points which are logically connected in order. To represent a single GPS track where GPS reception was lost, or the GPS receiver was turned off, start a new Track Segment for each continuous span of track data.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (trkpt*, extensions?)
        /// </para>
        /// </summary>
        public trksegType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A Track Point holds the coordinates, elevation, timestamp, and metadata for a single point in a track.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (trkpt*, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<wptType> trkpt {
            get {
                if ((this.trkptField == null)) {
                    this.trkptField = new XTypedList<wptType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("trkpt", "http://www.topografix.com/GPX/1/1"));
                }
                return this.trkptField;
            }
            set {
                if ((value == null)) {
                    this.trkptField = null;
                }
                else {
                    if ((this.trkptField == null)) {
                        this.trkptField = XTypedList<wptType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("trkpt", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<wptType>(this.trkptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You can add extend GPX by adding your own elements from another schema here.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (trkpt*, extensions?)
        /// </para>
        /// </summary>
        public virtual extensionsType extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"));
                return ((extensionsType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("trksegType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<trksegType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("trkpt", "http://www.topografix.com/GPX/1/1"), typeof(wptType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extensions", "http://www.topografix.com/GPX/1/1"), typeof(extensionsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 Information about the copyright holder and any license governing use of this file.  By linking to an appropriate license,
    ///	 you may place your data into the public domain or grant additional usage rights.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (year?, license?)
    /// </para>
    /// </summary>
    public partial class copyrightType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator copyrightType(XElement xe) { return XTypedServices.ToXTypedElement<copyrightType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static copyrightType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("year", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("license", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///	 Information about the copyright holder and any license governing use of this file.  By linking to an appropriate license,
        ///	 you may place your data into the public domain or grant additional usage rights.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (year?, license?)
        /// </para>
        /// </summary>
        public copyrightType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Year of copyright.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (year?, license?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<System.DateTime> year {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("year", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("year", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Link to external file containing license text.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (year?, license?)
        /// </para>
        /// </summary>
        public virtual System.Uri license {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("license", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("license", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Copyright holder (TopoSoft, Inc.)
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string author {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("author", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("author", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("copyrightType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<copyrightType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("year", "http://www.topografix.com/GPX/1/1"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("license", "http://www.topografix.com/GPX/1/1"), typeof(System.Uri));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 A link to an external resource (Web page, digital photo, video clip, etc) with additional information.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (text?, type?)
    /// </para>
    /// </summary>
    public partial class linkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator linkType(XElement xe) { return XTypedServices.ToXTypedElement<linkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static linkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("text", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///	 A link to an external resource (Web page, digital photo, video clip, etc) with additional information.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (text?, type?)
        /// </para>
        /// </summary>
        public linkType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Text of hyperlink.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (text?, type?)
        /// </para>
        /// </summary>
        public virtual string text {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("text", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("text", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Mime type of content (image/jpeg)
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (text?, type?)
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		URL of hyperlink.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("linkType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<linkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("text", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("type", "http://www.topografix.com/GPX/1/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 An email address.  Broken into two parts (id and domain) to help prevent email harvesting.
    ///    
    /// </para>
    /// </summary>
    public partial class emailType : XTypedElement, IXMetaData {
        
		public static explicit operator emailType(XElement xe) { return XTypedServices.ToXTypedElement<emailType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///	 An email address.  Broken into two parts (id and domain) to help prevent email harvesting.
        ///    
        /// </para>
        /// </summary>
        public emailType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		id half of email address (billgates2004)
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		domain half of email address (hotmail.com)
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string domain {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("domain", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("domain", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("emailType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emailType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 A person or organization.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (name?, email?, link?)
    /// </para>
    /// </summary>
    public partial class personType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator personType(XElement xe) { return XTypedServices.ToXTypedElement<personType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static personType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("email", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///	 A person or organization.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (name?, email?, link?)
        /// </para>
        /// </summary>
        public personType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Name of person or organization.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, email?, link?)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Email address.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, email?, link?)
        /// </para>
        /// </summary>
        public virtual emailType email {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("email", "http://www.topografix.com/GPX/1/1"));
                return ((emailType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("email", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Link to Web site or other external information about person.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, email?, link?)
        /// </para>
        /// </summary>
        public virtual linkType link {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"));
                return ((linkType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("personType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<personType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "http://www.topografix.com/GPX/1/1"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("email", "http://www.topografix.com/GPX/1/1"), typeof(emailType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("link", "http://www.topografix.com/GPX/1/1"), typeof(linkType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 A geographic point with optional elevation and time.  Available for use by other schemas.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (ele?, time?)
    /// </para>
    /// </summary>
    public partial class ptType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ptType(XElement xe) { return XTypedServices.ToXTypedElement<ptType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ptType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///	 A geographic point with optional elevation and time.  Available for use by other schemas.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?)
        /// </para>
        /// </summary>
        public ptType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The elevation (in meters) of the point.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> ele {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The time that the point was recorded.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ele?, time?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<System.DateTime> time {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The latitude of the point.  Decimal degrees, WGS84 datum.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal lat {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("lat", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("lat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The latitude of the point.  Decimal degrees, WGS84 datum.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal lon {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("lon", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("lon", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ptType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ele", "http://www.topografix.com/GPX/1/1"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("time", "http://www.topografix.com/GPX/1/1"), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 An ordered sequence of points.  (for polygons or polylines, e.g.)
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (pt*)
    /// </para>
    /// </summary>
    public partial class ptsegType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptType> ptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ptsegType(XElement xe) { return XTypedServices.ToXTypedElement<ptsegType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ptsegType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("pt", "http://www.topografix.com/GPX/1/1")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///	 An ordered sequence of points.  (for polygons or polylines, e.g.)
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (pt*)
        /// </para>
        /// </summary>
        public ptsegType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		 Ordered list of geographic points.
        ///		
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (pt*)
        /// </para>
        /// </summary>
        public virtual IList<ptType> pt {
            get {
                if ((this.ptField == null)) {
                    this.ptField = new XTypedList<ptType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("pt", "http://www.topografix.com/GPX/1/1"));
                }
                return this.ptField;
            }
            set {
                if ((value == null)) {
                    this.ptField = null;
                }
                else {
                    if ((this.ptField == null)) {
                        this.ptField = XTypedList<ptType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("pt", "http://www.topografix.com/GPX/1/1"));
                    }
                    else {
                        XTypedServices.SetList<ptType>(this.ptField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ptsegType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptsegType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("pt", "http://www.topografix.com/GPX/1/1"), typeof(ptType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 Two lat/lon pairs defining the extent of an element.
    ///    
    /// </para>
    /// </summary>
    public partial class boundsType : XTypedElement, IXMetaData {
        
		public static explicit operator boundsType(XElement xe) { return XTypedServices.ToXTypedElement<boundsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///	 Two lat/lon pairs defining the extent of an element.
        ///    
        /// </para>
        /// </summary>
        public boundsType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The minimum latitude.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal minlat {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("minlat", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("minlat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The minimum longitude.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal minlon {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("minlon", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("minlon", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The maximum latitude.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal maxlat {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("maxlat", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("maxlat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		The maximum longitude.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal maxlon {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("maxlon", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("maxlon", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("boundsType", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<boundsType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		The latitude of the point.  Decimal degrees, WGS84 datum.
    ///	  
    /// </para>
    /// </summary>
    public sealed class latitudeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 90.0m, 0, null, -90.0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private latitudeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		The longitude of the point.  Decimal degrees, WGS84 datum.
    ///	  
    /// </para>
    /// </summary>
    public sealed class longitudeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(384)), null, 0, 0, 180.0m, null, 0, null, -180.0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private longitudeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		Used for bearing, heading, course.  Units are decimal degrees, true (not magnetic).
    ///	  
    /// </para>
    /// </summary>
    public sealed class degreesType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(384)), null, 0, 0, 360.0m, null, 0, null, 0.0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private degreesType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		Type of GPS fix.  none means GPS had no fix.  To signify "the fix info is unknown, leave out fixType entirely. pps = military signal used
    ///	  
    /// </para>
    /// </summary>
    public sealed class fixType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "2d",
                        "3d",
                        "dgps",
                        "pps"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private fixType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	 Represents a differential GPS station.
    ///    
    /// </para>
    /// </summary>
    public sealed class dgpsStationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1023m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private dgpsStationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///		GPX documents contain a metadata header, followed by waypoints, routes, and tracks.  You can add your own elements
    ///		to the extensions section of the GPX document.
    ///	  
    /// </para>
    /// </summary>
    public partial class gpx : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private gpxType ContentField;
        
		public static explicit operator gpx(XElement xe) { return XTypedServices.ToXTypedElement<gpx, gpxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///		GPX documents contain a metadata header, followed by waypoints, routes, and tracks.  You can add your own elements
        ///		to the extensions section of the GPX document.
        ///	  
        /// </para>
        /// </summary>
        public gpx() {
            SetInnerType(new gpxType());
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		GPX documents contain a metadata header, followed by waypoints, routes, and tracks.  You can add your own elements
        ///		to the extensions section of the GPX document.
        ///	  
        /// </para>
        /// </summary>
        public gpx(gpxType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual gpxType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		Metadata about the file.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual metadataType metadata {
            get {
                return this.ContentField.metadata;
            }
            set {
                this.ContentField.metadata = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A list of waypoints.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<wptType> wpt {
            get {
                return this.ContentField.wpt;
            }
            set {
                this.ContentField.wpt = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A list of routes.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<rteType> rte {
            get {
                return this.ContentField.rte;
            }
            set {
                this.ContentField.rte = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		A list of tracks.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual IList<trkType> trk {
            get {
                return this.ContentField.trk;
            }
            set {
                this.ContentField.trk = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You can add extend GPX by adding your own elements from another schema here.
        ///	   
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (metadata?, wpt*, rte*, trk*, extensions?)
        /// </para>
        /// </summary>
        public virtual extensionsType extensions {
            get {
                return this.ContentField.extensions;
            }
            set {
                this.ContentField.extensions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You must include the version number in your GPX document.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///		You must include the name or URL of the software that created your GPX document.  This allows others to
        ///		inform the creator of a GPX instance document that fails to validate.
        ///	  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string creator {
            get {
                return this.ContentField.creator;
            }
            set {
                this.ContentField.creator = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("gpx", "http://www.topografix.com/GPX/1/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static gpx Load(string xmlFile) {
            return XTypedServices.Load<gpx, gpxType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static gpx Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<gpx, gpxType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static gpx Parse(string xml) {
            return XTypedServices.Parse<gpx, gpxType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new gpx(((gpxType)(this.Content.Clone())));
        }
        
        private void SetInnerType(gpxType ContentField) {
            this.ContentField = ((gpxType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("gpxType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.gpxType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("metadataType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.metadataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("wptType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.wptType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("rteType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.rteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("trkType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.trkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extensionsType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.extensionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("trksegType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.trksegType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("copyrightType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.copyrightType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("linkType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.linkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("emailType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.emailType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("personType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.personType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.ptType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptsegType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.ptsegType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("boundsType", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.boundsType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("gpx", "http://www.topografix.com/GPX/1/1"), typeof(global::GPX.v1_1.gpx));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(GPX.v1_1.gpx), typeof(global::GPX.v1_1.gpxType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("gpx", "http://www.topografix.com/GPX/1/1")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public gpx gpx {  get {return rootObject as gpx; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(gpx root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::GPX.v1_1.gpx gpx {  get {return rootObject as global::GPX.v1_1.gpx; } }
        
        private XRoot() {
        }
        
        public XRoot(global::GPX.v1_1.gpx root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
