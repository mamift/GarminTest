//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Garmin.TrainingCenterDatabase.V2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
    /// </para>
    /// </summary>
    public partial class TrainingCenterDatabase_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrainingCenterDatabase_t(XElement xe) { return XTypedServices.ToXTypedElement<TrainingCenterDatabase_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrainingCenterDatabase_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Folders", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Activities", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Author", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public TrainingCenterDatabase_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Folders_t Folders {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Folders", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Folders_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Folders", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual ActivityList_t Activities {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Activities", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((ActivityList_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Activities", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual WorkoutList_t Workouts {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((WorkoutList_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual CourseList_t Courses {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((CourseList_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual AbstractSource_t Author {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Author", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((AbstractSource_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Author", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("TrainingCenterDatabase_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrainingCenterDatabase_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Folders", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Folders_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Activities", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ActivityList_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(WorkoutList_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(CourseList_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Author", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(AbstractSource_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (History?, Workouts?, Courses?)
    /// </para>
    /// </summary>
    public partial class Folders_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Folders_t(XElement xe) { return XTypedServices.ToXTypedElement<Folders_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Folders_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("History", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (History?, Workouts?, Courses?)
        /// </para>
        /// </summary>
        public Folders_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (History?, Workouts?, Courses?)
        /// </para>
        /// </summary>
        public virtual History_t History {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("History", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((History_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("History", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (History?, Workouts?, Courses?)
        /// </para>
        /// </summary>
        public virtual Workouts_t Workouts {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Workouts_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (History?, Workouts?, Courses?)
        /// </para>
        /// </summary>
        public virtual Courses_t Courses {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Courses_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Folders_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Folders_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("History", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(History_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Workouts", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Workouts_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Courses", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Courses_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Activity*, MultiSportSession*)
    /// </para>
    /// </summary>
    public partial class ActivityList_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Activity_t> ActivityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MultiSportSession_t> MultiSportSessionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ActivityList_t(XElement xe) { return XTypedServices.ToXTypedElement<ActivityList_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ActivityList_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MultiSportSession", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Activity*, MultiSportSession*)
        /// </para>
        /// </summary>
        public ActivityList_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Activity*, MultiSportSession*)
        /// </para>
        /// </summary>
        public virtual IList<Activity_t> Activity {
            get {
                if ((this.ActivityField == null)) {
                    this.ActivityField = new XTypedList<Activity_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.ActivityField;
            }
            set {
                if ((value == null)) {
                    this.ActivityField = null;
                }
                else {
                    if ((this.ActivityField == null)) {
                        this.ActivityField = XTypedList<Activity_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Activity_t>(this.ActivityField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Activity*, MultiSportSession*)
        /// </para>
        /// </summary>
        public virtual IList<MultiSportSession_t> MultiSportSession {
            get {
                if ((this.MultiSportSessionField == null)) {
                    this.MultiSportSessionField = new XTypedList<MultiSportSession_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("MultiSportSession", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.MultiSportSessionField;
            }
            set {
                if ((value == null)) {
                    this.MultiSportSessionField = null;
                }
                else {
                    if ((this.MultiSportSessionField == null)) {
                        this.MultiSportSessionField = XTypedList<MultiSportSession_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("MultiSportSession", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<MultiSportSession_t>(this.MultiSportSessionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ActivityList_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ActivityList_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Activity_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MultiSportSession", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(MultiSportSession_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Workout*)
    /// </para>
    /// </summary>
    public partial class WorkoutList_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Workout_t> WorkoutField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WorkoutList_t(XElement xe) { return XTypedServices.ToXTypedElement<WorkoutList_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkoutList_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Workout", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Workout*)
        /// </para>
        /// </summary>
        public WorkoutList_t() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///The StepId should be unique within a workout and should not exceed 20. This restricts the number of steps in a workout to 20.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Workout*)
        /// </para>
        /// </summary>
        public virtual IList<Workout_t> Workout {
            get {
                if ((this.WorkoutField == null)) {
                    this.WorkoutField = new XTypedList<Workout_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Workout", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.WorkoutField;
            }
            set {
                if ((value == null)) {
                    this.WorkoutField = null;
                }
                else {
                    if ((this.WorkoutField == null)) {
                        this.WorkoutField = XTypedList<Workout_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Workout", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Workout_t>(this.WorkoutField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("WorkoutList_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkoutList_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Workout", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Workout_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Course*)
    /// </para>
    /// </summary>
    public partial class CourseList_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Course_t> CourseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CourseList_t(XElement xe) { return XTypedServices.ToXTypedElement<CourseList_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CourseList_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Course", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Course*)
        /// </para>
        /// </summary>
        public CourseList_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Course*)
        /// </para>
        /// </summary>
        public virtual IList<Course_t> Course {
            get {
                if ((this.CourseField == null)) {
                    this.CourseField = new XTypedList<Course_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Course", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.CourseField;
            }
            set {
                if ((value == null)) {
                    this.CourseField = null;
                }
                else {
                    if ((this.CourseField == null)) {
                        this.CourseField = XTypedList<Course_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Course", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Course_t>(this.CourseField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CourseList_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CourseList_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Course", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Course_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Running, Biking, Other, MultiSport, Extensions?)
    /// </para>
    /// </summary>
    public partial class History_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator History_t(XElement xe) { return XTypedServices.ToXTypedElement<History_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static History_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MultiSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Running, Biking, Other, MultiSport, Extensions?)
        /// </para>
        /// </summary>
        public History_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, MultiSport, Extensions?)
        /// </para>
        /// </summary>
        public virtual HistoryFolder_t Running {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HistoryFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, MultiSport, Extensions?)
        /// </para>
        /// </summary>
        public virtual HistoryFolder_t Biking {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HistoryFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, MultiSport, Extensions?)
        /// </para>
        /// </summary>
        public virtual HistoryFolder_t Other {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HistoryFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, MultiSport, Extensions?)
        /// </para>
        /// </summary>
        public virtual MultiSportFolder_t MultiSport {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MultiSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((MultiSportFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MultiSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, MultiSport, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("History_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<History_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HistoryFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HistoryFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HistoryFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MultiSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(MultiSportFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Id)
    /// </para>
    /// </summary>
    public partial class ActivityReference_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ActivityReference_t(XElement xe) { return XTypedServices.ToXTypedElement<ActivityReference_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ActivityReference_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Id)
        /// </para>
        /// </summary>
        public ActivityReference_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Id)
        /// </para>
        /// </summary>
        public virtual System.DateTime Id {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ActivityReference_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ActivityReference_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder*, ActivityRef*, Week*, Notes?, Extensions?)
    /// </para>
    /// </summary>
    public partial class HistoryFolder_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HistoryFolder_t> FolderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ActivityReference_t> ActivityRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Week_t> WeekField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HistoryFolder_t(XElement xe) { return XTypedServices.ToXTypedElement<HistoryFolder_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HistoryFolder_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder*, ActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public HistoryFolder_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, ActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<HistoryFolder_t> Folder {
            get {
                if ((this.FolderField == null)) {
                    this.FolderField = new XTypedList<HistoryFolder_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.FolderField;
            }
            set {
                if ((value == null)) {
                    this.FolderField = null;
                }
                else {
                    if ((this.FolderField == null)) {
                        this.FolderField = XTypedList<HistoryFolder_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<HistoryFolder_t>(this.FolderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, ActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<ActivityReference_t> ActivityRef {
            get {
                if ((this.ActivityRefField == null)) {
                    this.ActivityRefField = new XTypedList<ActivityReference_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.ActivityRefField;
            }
            set {
                if ((value == null)) {
                    this.ActivityRefField = null;
                }
                else {
                    if ((this.ActivityRefField == null)) {
                        this.ActivityRefField = XTypedList<ActivityReference_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<ActivityReference_t>(this.ActivityRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, ActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<Week_t> Week {
            get {
                if ((this.WeekField == null)) {
                    this.WeekField = new XTypedList<Week_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.WeekField;
            }
            set {
                if ((value == null)) {
                    this.WeekField = null;
                }
                else {
                    if ((this.WeekField == null)) {
                        this.WeekField = XTypedList<Week_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Week_t>(this.WeekField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, ActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, ActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HistoryFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HistoryFolder_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HistoryFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ActivityReference_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Week_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder*, MultisportActivityRef*, Week*, Notes?, Extensions?)
    /// </para>
    /// </summary>
    public partial class MultiSportFolder_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MultiSportFolder_t> FolderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ActivityReference_t> MultisportActivityRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Week_t> WeekField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MultiSportFolder_t(XElement xe) { return XTypedServices.ToXTypedElement<MultiSportFolder_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MultiSportFolder_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MultisportActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder*, MultisportActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public MultiSportFolder_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, MultisportActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<MultiSportFolder_t> Folder {
            get {
                if ((this.FolderField == null)) {
                    this.FolderField = new XTypedList<MultiSportFolder_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.FolderField;
            }
            set {
                if ((value == null)) {
                    this.FolderField = null;
                }
                else {
                    if ((this.FolderField == null)) {
                        this.FolderField = XTypedList<MultiSportFolder_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<MultiSportFolder_t>(this.FolderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, MultisportActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<ActivityReference_t> MultisportActivityRef {
            get {
                if ((this.MultisportActivityRefField == null)) {
                    this.MultisportActivityRefField = new XTypedList<ActivityReference_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("MultisportActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.MultisportActivityRefField;
            }
            set {
                if ((value == null)) {
                    this.MultisportActivityRefField = null;
                }
                else {
                    if ((this.MultisportActivityRefField == null)) {
                        this.MultisportActivityRefField = XTypedList<ActivityReference_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("MultisportActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<ActivityReference_t>(this.MultisportActivityRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, MultisportActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<Week_t> Week {
            get {
                if ((this.WeekField == null)) {
                    this.WeekField = new XTypedList<Week_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.WeekField;
            }
            set {
                if ((value == null)) {
                    this.WeekField = null;
                }
                else {
                    if ((this.WeekField == null)) {
                        this.WeekField = XTypedList<Week_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Week_t>(this.WeekField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, MultisportActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, MultisportActivityRef*, Week*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MultiSportFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MultiSportFolder_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(MultiSportFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MultisportActivityRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ActivityReference_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Week", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Week_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Notes?)
    /// </para>
    /// </summary>
    public partial class Week_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Week_t(XElement xe) { return XTypedServices.ToXTypedElement<Week_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Week_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Notes?)
        /// </para>
        /// </summary>
        public Week_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Notes?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime StartDay {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("StartDay", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("StartDay", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Week_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Week_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Id, FirstSport, NextSport*, Notes?)
    /// </para>
    /// </summary>
    public partial class MultiSportSession_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NextSport_t> NextSportField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MultiSportSession_t(XElement xe) { return XTypedServices.ToXTypedElement<MultiSportSession_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MultiSportSession_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("FirstSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("NextSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Id, FirstSport, NextSport*, Notes?)
        /// </para>
        /// </summary>
        public MultiSportSession_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Id, FirstSport, NextSport*, Notes?)
        /// </para>
        /// </summary>
        public virtual System.DateTime Id {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Id, FirstSport, NextSport*, Notes?)
        /// </para>
        /// </summary>
        public virtual FirstSport_t FirstSport {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("FirstSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((FirstSport_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("FirstSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Id, FirstSport, NextSport*, Notes?)
        /// </para>
        /// </summary>
        public virtual IList<NextSport_t> NextSport {
            get {
                if ((this.NextSportField == null)) {
                    this.NextSportField = new XTypedList<NextSport_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("NextSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.NextSportField;
            }
            set {
                if ((value == null)) {
                    this.NextSportField = null;
                }
                else {
                    if ((this.NextSportField == null)) {
                        this.NextSportField = XTypedList<NextSport_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("NextSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<NextSport_t>(this.NextSportField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Id, FirstSport, NextSport*, Notes?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MultiSportSession_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MultiSportSession_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("FirstSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(FirstSport_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("NextSport", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(NextSport_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Activity)
    /// </para>
    /// </summary>
    public partial class FirstSport_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FirstSport_t(XElement xe) { return XTypedServices.ToXTypedElement<FirstSport_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FirstSport_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Activity)
        /// </para>
        /// </summary>
        public FirstSport_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Activity)
        /// </para>
        /// </summary>
        public virtual Activity_t Activity {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Activity_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("FirstSport_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FirstSport_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Activity_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Transition?, Activity)
    /// </para>
    /// </summary>
    public partial class NextSport_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NextSport_t(XElement xe) { return XTypedServices.ToXTypedElement<NextSport_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NextSport_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Transition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Transition?, Activity)
        /// </para>
        /// </summary>
        public NextSport_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Transition?, Activity)
        /// </para>
        /// </summary>
        public virtual ActivityLap_t Transition {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Transition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((ActivityLap_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Transition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Transition?, Activity)
        /// </para>
        /// </summary>
        public virtual Activity_t Activity {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Activity_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("NextSport_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NextSport_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Transition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ActivityLap_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Activity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Activity_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class Sport_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Running",
                        "Biking",
                        "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Sport_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
    /// </para>
    /// </summary>
    public partial class Activity_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ActivityLap_t> LapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Activity_t(XElement xe) { return XTypedServices.ToXTypedElement<Activity_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Activity_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Training", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public Activity_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.DateTime Id {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<ActivityLap_t> Lap {
            get {
                if ((this.LapField == null)) {
                    this.LapField = new XTypedList<ActivityLap_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.LapField;
            }
            set {
                if ((value == null)) {
                    this.LapField = null;
                }
                else {
                    if ((this.LapField == null)) {
                        this.LapField = XTypedList<ActivityLap_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<ActivityLap_t>(this.LapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Training_t Training {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Training", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Training_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Training", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual AbstractSource_t Creator {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((AbstractSource_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Id, Lap+, Notes?, Training?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Sport {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Sport", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Sport", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Activity_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Activity_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ActivityLap_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Training", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Training_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(AbstractSource_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name)
    /// </para>
    /// </summary>
    public abstract partial class AbstractSource_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AbstractSource_t(XElement xe) {  return (AbstractSource_t)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AbstractSource_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name)
        /// </para>
        /// </summary>
        public AbstractSource_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Name", global::Garmin.TrainingCenterDatabase.V2.Token_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AbstractSource_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///Identifies the originating GPS device that tracked a run or used to identify the type of device capable of handling the data for loading.
    ///
    /// </para>
    /// <para>
    /// Regular expression: (Name, UnitId, ProductID, Version)
    /// </para>
    /// </summary>
    public partial class Device_t : global::Garmin.TrainingCenterDatabase.V2.AbstractSource_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Device_t(XElement xe) { return XTypedServices.ToXTypedElement<Device_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Device_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("UnitId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ProductID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///Identifies the originating GPS device that tracked a run or used to identify the type of device capable of handling the data for loading.
        ///
        /// </para>
        /// <para>
        /// Regular expression: (Name, UnitId, ProductID, Version)
        /// </para>
        /// </summary>
        public Device_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, UnitId, ProductID, Version)
        /// </para>
        /// </summary>
        public virtual uint UnitId {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("UnitId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<uint>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedInt).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("UnitId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedInt).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, UnitId, ProductID, Version)
        /// </para>
        /// </summary>
        public virtual ushort ProductID {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ProductID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ProductID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, UnitId, ProductID, Version)
        /// </para>
        /// </summary>
        public virtual Version_t Version {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Version_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Device_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Device_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("UnitId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(uint));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ProductID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Version_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Identifies a PC software application.
    /// </para>
    /// <para>
    /// Regular expression: (Name, Build, LangID, PartNumber)
    /// </para>
    /// </summary>
    public partial class Application_t : global::Garmin.TrainingCenterDatabase.V2.AbstractSource_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Application_t(XElement xe) { return XTypedServices.ToXTypedElement<Application_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Application_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Build", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("LangID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("PartNumber", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Identifies a PC software application.
        /// </para>
        /// <para>
        /// Regular expression: (Name, Build, LangID, PartNumber)
        /// </para>
        /// </summary>
        public Application_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Build, LangID, PartNumber)
        /// </para>
        /// </summary>
        public virtual Build_t Build {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Build", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Build_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Build", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Build, LangID, PartNumber)
        /// </para>
        /// </summary>
        public virtual string LangID {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("LangID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("LangID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "LangID", global::Garmin.TrainingCenterDatabase.V2.LangID_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Build, LangID, PartNumber)
        /// </para>
        /// </summary>
        public virtual string PartNumber {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PartNumber", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("PartNumber", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "PartNumber", global::Garmin.TrainingCenterDatabase.V2.PartNumber_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Application_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Application_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Build", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Build_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("LangID", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PartNumber", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///Specifies the two character ISO 693-1 language id that identifies the installed language of this application. see http://www.loc.gov/standards/iso639-2/ for appropriate ISO identifiers
    ///
    /// </para>
    /// </summary>
    public sealed class LangID_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(33)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private LangID_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///The formatted XXX-XXXXX-XX Garmin part number of a PC application.
    ///
    /// </para>
    /// </summary>
    public sealed class PartNumber_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(40)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[\\p{Lu}\\d]{3}-[\\p{Lu}\\d]{5}-[\\p{Lu}\\d]{2}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private PartNumber_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///Token must be defined as a type because of a bug in the MSXML parser which does not correctly process xsd:token using the whiteSpace value of "collapse"
    ///
    /// </para>
    /// </summary>
    public sealed class Token_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(32)), null, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Token_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Version, Type?, Time?, Builder?)
    /// </para>
    /// </summary>
    public partial class Build_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Build_t(XElement xe) { return XTypedServices.ToXTypedElement<Build_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Build_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Type", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Builder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Version, Type?, Time?, Builder?)
        /// </para>
        /// </summary>
        public Build_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Type?, Time?, Builder?)
        /// </para>
        /// </summary>
        public virtual Version_t Version {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Version_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Version, Type?, Time?, Builder?)
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Type", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Type", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Type", global::Garmin.TrainingCenterDatabase.V2.BuildType_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///A string containing the date and time when an application was built. Note that this is not an xsd:dateTime type because this string is generated by the compiler and cannot be readily converted to the xsd:dateTime format.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Version, Type?, Time?, Builder?)
        /// </para>
        /// </summary>
        public virtual string Time {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Time", global::Garmin.TrainingCenterDatabase.V2.Token_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///The login name of the engineer who created this build.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Version, Type?, Time?, Builder?)
        /// </para>
        /// </summary>
        public virtual string Builder {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Builder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Builder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Builder", global::Garmin.TrainingCenterDatabase.V2.Token_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Build_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Build_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Version", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Version_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Type", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Builder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class BuildType_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Internal",
                        "Alpha",
                        "Beta",
                        "Release"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private BuildType_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VersionMajor, VersionMinor, BuildMajor?, BuildMinor?)
    /// </para>
    /// </summary>
    public partial class Version_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Version_t(XElement xe) { return XTypedServices.ToXTypedElement<Version_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Version_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("VersionMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("VersionMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("BuildMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("BuildMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VersionMajor, VersionMinor, BuildMajor?, BuildMinor?)
        /// </para>
        /// </summary>
        public Version_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VersionMajor, VersionMinor, BuildMajor?, BuildMinor?)
        /// </para>
        /// </summary>
        public virtual ushort VersionMajor {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("VersionMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("VersionMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VersionMajor, VersionMinor, BuildMajor?, BuildMinor?)
        /// </para>
        /// </summary>
        public virtual ushort VersionMinor {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("VersionMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("VersionMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VersionMajor, VersionMinor, BuildMajor?, BuildMinor?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<ushort> BuildMajor {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("BuildMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("BuildMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VersionMajor, VersionMinor, BuildMajor?, BuildMinor?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<ushort> BuildMinor {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("BuildMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("BuildMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Version_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Version_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("VersionMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("VersionMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("BuildMajor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("BuildMinor", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (QuickWorkoutResults?, Plan?)
    /// </para>
    /// </summary>
    public partial class Training_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Training_t(XElement xe) { return XTypedServices.ToXTypedElement<Training_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Training_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("QuickWorkoutResults", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Plan", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (QuickWorkoutResults?, Plan?)
        /// </para>
        /// </summary>
        public Training_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (QuickWorkoutResults?, Plan?)
        /// </para>
        /// </summary>
        public virtual QuickWorkout_t QuickWorkoutResults {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("QuickWorkoutResults", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((QuickWorkout_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("QuickWorkoutResults", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (QuickWorkoutResults?, Plan?)
        /// </para>
        /// </summary>
        public virtual Plan_t Plan {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Plan", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Plan_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Plan", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual bool VirtualPartner {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("VirtualPartner", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("VirtualPartner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Training_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Training_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("QuickWorkoutResults", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(QuickWorkout_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Plan", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Plan_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TotalTimeSeconds, DistanceMeters)
    /// </para>
    /// </summary>
    public partial class QuickWorkout_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator QuickWorkout_t(XElement xe) { return XTypedServices.ToXTypedElement<QuickWorkout_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QuickWorkout_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters)
        /// </para>
        /// </summary>
        public QuickWorkout_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters)
        /// </para>
        /// </summary>
        public virtual double TotalTimeSeconds {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters)
        /// </para>
        /// </summary>
        public virtual double DistanceMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("QuickWorkout_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QuickWorkout_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name?, Extensions?)
    /// </para>
    /// </summary>
    public partial class Plan_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Plan_t(XElement xe) { return XTypedServices.ToXTypedElement<Plan_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Plan_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name?, Extensions?)
        /// </para>
        /// </summary>
        public Plan_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Name", global::Garmin.TrainingCenterDatabase.V2.RestrictedToken_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual bool IntervalWorkout {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("IntervalWorkout", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("IntervalWorkout", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Plan_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Plan_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class TrainingType_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Workout",
                        "Course"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private TrainingType_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
    /// </para>
    /// </summary>
    public partial class ActivityLap_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Track_t> TrackField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ActivityLap_t(XElement xe) { return XTypedServices.ToXTypedElement<ActivityLap_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ActivityLap_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MaximumSpeed", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("TriggerMethod", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public ActivityLap_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual double TotalTimeSeconds {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual double DistanceMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<double> MaximumSpeed {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MaximumSpeed", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MaximumSpeed", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual ushort Calories {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual HeartRateInBeatsPerMinute_t AverageHeartRateBpm {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateInBeatsPerMinute_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual HeartRateInBeatsPerMinute_t MaximumHeartRateBpm {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateInBeatsPerMinute_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Intensity {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Intensity", global::Garmin.TrainingCenterDatabase.V2.Intensity_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<byte> Cadence {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Cadence", global::Garmin.TrainingCenterDatabase.V2.CadenceValue_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string TriggerMethod {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("TriggerMethod", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("TriggerMethod", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "TriggerMethod", global::Garmin.TrainingCenterDatabase.V2.TriggerMethod_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<Track_t> Track {
            get {
                if ((this.TrackField == null)) {
                    this.TrackField = new XTypedList<Track_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.TrackField;
            }
            set {
                if ((value == null)) {
                    this.TrackField = null;
                }
                else {
                    if ((this.TrackField == null)) {
                        this.TrackField = XTypedList<Track_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Track_t>(this.TrackField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, MaximumSpeed?, Calories, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, TriggerMethod, Track*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime StartTime {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("StartTime", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("StartTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ActivityLap_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ActivityLap_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MaximumSpeed", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateInBeatsPerMinute_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateInBeatsPerMinute_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(byte));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("TriggerMethod", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Track_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class CadenceValue_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 254, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CadenceValue_t() {
        }
    }
    
    public sealed class TriggerMethod_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Manual",
                        "Distance",
                        "Location",
                        "Time",
                        "HeartRate"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private TriggerMethod_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Trackpoint+)
    /// </para>
    /// </summary>
    public partial class Track_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Trackpoint_t> TrackpointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Track_t(XElement xe) { return XTypedServices.ToXTypedElement<Track_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Track_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Trackpoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Trackpoint+)
        /// </para>
        /// </summary>
        public Track_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Trackpoint+)
        /// </para>
        /// </summary>
        public virtual IList<Trackpoint_t> Trackpoint {
            get {
                if ((this.TrackpointField == null)) {
                    this.TrackpointField = new XTypedList<Trackpoint_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Trackpoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.TrackpointField;
            }
            set {
                if ((value == null)) {
                    this.TrackpointField = null;
                }
                else {
                    if ((this.TrackpointField == null)) {
                        this.TrackpointField = XTypedList<Trackpoint_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Trackpoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Trackpoint_t>(this.TrackpointField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Track_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Track_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Trackpoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Trackpoint_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
    /// </para>
    /// </summary>
    public partial class Trackpoint_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Trackpoint_t(XElement xe) { return XTypedServices.ToXTypedElement<Trackpoint_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Trackpoint_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("HeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("SensorState", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public Trackpoint_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.DateTime Time {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Position_t Position {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Position_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<double> AltitudeMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<double> DistanceMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual HeartRateInBeatsPerMinute_t HeartRateBpm {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("HeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateInBeatsPerMinute_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("HeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<byte> Cadence {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Cadence", global::Garmin.TrainingCenterDatabase.V2.CadenceValue_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string SensorState {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("SensorState", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("SensorState", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "SensorState", global::Garmin.TrainingCenterDatabase.V2.SensorState_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Time, Position?, AltitudeMeters?, DistanceMeters?, HeartRateBpm?, Cadence?, SensorState?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Trackpoint_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Trackpoint_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Position_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("HeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateInBeatsPerMinute_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(byte));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("SensorState", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LatitudeDegrees, LongitudeDegrees)
    /// </para>
    /// </summary>
    public partial class Position_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Position_t(XElement xe) { return XTypedServices.ToXTypedElement<Position_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Position_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("LatitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("LongitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LatitudeDegrees, LongitudeDegrees)
        /// </para>
        /// </summary>
        public Position_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LatitudeDegrees, LongitudeDegrees)
        /// </para>
        /// </summary>
        public virtual double LatitudeDegrees {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("LatitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("LatitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "LatitudeDegrees", global::Garmin.TrainingCenterDatabase.V2.DegreesLatitude_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LatitudeDegrees, LongitudeDegrees)
        /// </para>
        /// </summary>
        public virtual double LongitudeDegrees {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("LongitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("LongitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "LongitudeDegrees", global::Garmin.TrainingCenterDatabase.V2.DegreesLongitude_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Position_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Position_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("LatitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("LongitudeDegrees", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class DegreesLongitude_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(384)), null, 0, 0, 180D, null, 0, null, -180D, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DegreesLongitude_t() {
        }
    }
    
    public sealed class DegreesLatitude_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 90D, 0, null, -90D, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DegreesLatitude_t() {
        }
    }
    
    public sealed class SensorState_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Present",
                        "Absent"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SensorState_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Running, Biking, Other, Extensions?)
    /// </para>
    /// </summary>
    public partial class Workouts_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Workouts_t(XElement xe) { return XTypedServices.ToXTypedElement<Workouts_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Workouts_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Running, Biking, Other, Extensions?)
        /// </para>
        /// </summary>
        public Workouts_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, Extensions?)
        /// </para>
        /// </summary>
        public virtual WorkoutFolder_t Running {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((WorkoutFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, Extensions?)
        /// </para>
        /// </summary>
        public virtual WorkoutFolder_t Biking {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((WorkoutFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, Extensions?)
        /// </para>
        /// </summary>
        public virtual WorkoutFolder_t Other {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((WorkoutFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Running, Biking, Other, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Workouts_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Workouts_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Running", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(WorkoutFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Biking", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(WorkoutFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(WorkoutFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Id)
    /// </para>
    /// </summary>
    public partial class NameKeyReference_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NameKeyReference_t(XElement xe) { return XTypedServices.ToXTypedElement<NameKeyReference_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NameKeyReference_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Id)
        /// </para>
        /// </summary>
        public NameKeyReference_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Id)
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Id", global::Garmin.TrainingCenterDatabase.V2.RestrictedToken_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("NameKeyReference_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NameKeyReference_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Id", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder*, WorkoutNameRef*, Extensions?)
    /// </para>
    /// </summary>
    public partial class WorkoutFolder_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WorkoutFolder_t> FolderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NameKeyReference_t> WorkoutNameRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WorkoutFolder_t(XElement xe) { return XTypedServices.ToXTypedElement<WorkoutFolder_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkoutFolder_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("WorkoutNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder*, WorkoutNameRef*, Extensions?)
        /// </para>
        /// </summary>
        public WorkoutFolder_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, WorkoutNameRef*, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<WorkoutFolder_t> Folder {
            get {
                if ((this.FolderField == null)) {
                    this.FolderField = new XTypedList<WorkoutFolder_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.FolderField;
            }
            set {
                if ((value == null)) {
                    this.FolderField = null;
                }
                else {
                    if ((this.FolderField == null)) {
                        this.FolderField = XTypedList<WorkoutFolder_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<WorkoutFolder_t>(this.FolderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, WorkoutNameRef*, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<NameKeyReference_t> WorkoutNameRef {
            get {
                if ((this.WorkoutNameRefField == null)) {
                    this.WorkoutNameRefField = new XTypedList<NameKeyReference_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("WorkoutNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.WorkoutNameRefField;
            }
            set {
                if ((value == null)) {
                    this.WorkoutNameRefField = null;
                }
                else {
                    if ((this.WorkoutNameRefField == null)) {
                        this.WorkoutNameRefField = XTypedList<NameKeyReference_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("WorkoutNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<NameKeyReference_t>(this.WorkoutNameRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, WorkoutNameRef*, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("WorkoutFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkoutFolder_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(WorkoutFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("WorkoutNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(NameKeyReference_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
    /// </para>
    /// </summary>
    public partial class Workout_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AbstractStep_t> StepField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.DateTime> ScheduledOnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Workout_t(XElement xe) { return XTypedServices.ToXTypedElement<Workout_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Workout_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Step", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ScheduledOn", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public Workout_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Name", global::Garmin.TrainingCenterDatabase.V2.RestrictedToken_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<AbstractStep_t> Step {
            get {
                if ((this.StepField == null)) {
                    this.StepField = new XTypedList<AbstractStep_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Step", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.StepField;
            }
            set {
                if ((value == null)) {
                    this.StepField = null;
                }
                else {
                    if ((this.StepField == null)) {
                        this.StepField = XTypedList<AbstractStep_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Step", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<AbstractStep_t>(this.StepField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<System.DateTime> ScheduledOn {
            get {
                if ((this.ScheduledOnField == null)) {
                    this.ScheduledOnField = new XSimpleList<System.DateTime>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype, System.Xml.Linq.XName.Get("ScheduledOn", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.ScheduledOnField;
            }
            set {
                if ((value == null)) {
                    this.ScheduledOnField = null;
                }
                else {
                    if ((this.ScheduledOnField == null)) {
                        this.ScheduledOnField = XSimpleList<System.DateTime>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype, value, System.Xml.Linq.XName.Get("ScheduledOn", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<System.DateTime>(this.ScheduledOnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual AbstractSource_t Creator {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((AbstractSource_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Step+, ScheduledOn*, Notes?, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Sport {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Sport", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Sport", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Workout_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Workout_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Step", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(AbstractStep_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ScheduledOn", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(AbstractSource_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class RestrictedToken_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 15, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private RestrictedToken_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (StepId)
    /// </para>
    /// </summary>
    public abstract partial class AbstractStep_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AbstractStep_t(XElement xe) {  return (AbstractStep_t)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AbstractStep_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StepId)
        /// </para>
        /// </summary>
        public AbstractStep_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StepId)
        /// </para>
        /// </summary>
        public virtual decimal StepId {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "StepId", global::Garmin.TrainingCenterDatabase.V2.StepId_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AbstractStep_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class StepId_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 20m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StepId_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (StepId, Repetitions, Child+)
    /// </para>
    /// </summary>
    public partial class Repeat_t : global::Garmin.TrainingCenterDatabase.V2.AbstractStep_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AbstractStep_t> ChildField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Repeat_t(XElement xe) { return XTypedServices.ToXTypedElement<Repeat_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Repeat_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Repetitions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Child", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StepId, Repetitions, Child+)
        /// </para>
        /// </summary>
        public Repeat_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StepId, Repetitions, Child+)
        /// </para>
        /// </summary>
        public virtual decimal Repetitions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Repetitions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Repetitions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Repetitions", global::Garmin.TrainingCenterDatabase.V2.Repetitions_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (StepId, Repetitions, Child+)
        /// </para>
        /// </summary>
        public virtual IList<AbstractStep_t> Child {
            get {
                if ((this.ChildField == null)) {
                    this.ChildField = new XTypedList<AbstractStep_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Child", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.ChildField;
            }
            set {
                if ((value == null)) {
                    this.ChildField = null;
                }
                else {
                    if ((this.ChildField == null)) {
                        this.ChildField = XTypedList<AbstractStep_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Child", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<AbstractStep_t>(this.ChildField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Repeat_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Repeat_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Repetitions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Child", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(AbstractStep_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class Repetitions_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 99m, 0, null, 2m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Repetitions_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (StepId, Name?, Duration, Intensity, Target)
    /// </para>
    /// </summary>
    public partial class Step_t : global::Garmin.TrainingCenterDatabase.V2.AbstractStep_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Step_t(XElement xe) { return XTypedServices.ToXTypedElement<Step_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Step_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Duration", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Target", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StepId, Name?, Duration, Intensity, Target)
        /// </para>
        /// </summary>
        public Step_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StepId, Name?, Duration, Intensity, Target)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Name", global::Garmin.TrainingCenterDatabase.V2.RestrictedToken_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StepId, Name?, Duration, Intensity, Target)
        /// </para>
        /// </summary>
        public virtual Duration_t Duration {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Duration", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Duration_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Duration", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StepId, Name?, Duration, Intensity, Target)
        /// </para>
        /// </summary>
        public virtual string Intensity {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Intensity", global::Garmin.TrainingCenterDatabase.V2.Intensity_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StepId, Name?, Duration, Intensity, Target)
        /// </para>
        /// </summary>
        public virtual Target_t Target {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Target", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Target_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Target", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Step_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Step_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("StepId", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Duration", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Duration_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Target", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Target_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public abstract partial class Duration_t : XTypedElement, IXMetaData {
        
		public static explicit operator Duration_t(XElement xe) {  return (Duration_t)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Duration_t() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Duration_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class Intensity_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Active",
                        "Resting"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Intensity_t() {
        }
    }
    
    public abstract partial class Target_t : XTypedElement, IXMetaData {
        
		public static explicit operator Target_t(XElement xe) {  return (Target_t)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Target_t() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Target_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Seconds)
    /// </para>
    /// </summary>
    public partial class Time_t : global::Garmin.TrainingCenterDatabase.V2.Duration_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Time_t(XElement xe) { return XTypedServices.ToXTypedElement<Time_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Time_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Seconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Seconds)
        /// </para>
        /// </summary>
        public Time_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Seconds)
        /// </para>
        /// </summary>
        public virtual ushort Seconds {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Seconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Seconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Time_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Time_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Seconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Meters)
    /// </para>
    /// </summary>
    public partial class Distance_t : global::Garmin.TrainingCenterDatabase.V2.Duration_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Distance_t(XElement xe) { return XTypedServices.ToXTypedElement<Distance_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Distance_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Meters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Meters)
        /// </para>
        /// </summary>
        public Distance_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Meters)
        /// </para>
        /// </summary>
        public virtual ushort Meters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Meters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Meters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Distance_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Distance_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Meters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HeartRate)
    /// </para>
    /// </summary>
    public partial class HeartRateAbove_t : global::Garmin.TrainingCenterDatabase.V2.Duration_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HeartRateAbove_t(XElement xe) { return XTypedServices.ToXTypedElement<HeartRateAbove_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HeartRateAbove_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HeartRate)
        /// </para>
        /// </summary>
        public HeartRateAbove_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HeartRate)
        /// </para>
        /// </summary>
        public virtual HeartRateValue_t HeartRate {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateValue_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HeartRateAbove_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeartRateAbove_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateValue_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public abstract partial class HeartRateValue_t : XTypedElement, IXMetaData {
        
		public static explicit operator HeartRateValue_t(XElement xe) {  return (HeartRateValue_t)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HeartRateValue_t() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HeartRateValue_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HeartRate)
    /// </para>
    /// </summary>
    public partial class HeartRateBelow_t : global::Garmin.TrainingCenterDatabase.V2.Duration_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HeartRateBelow_t(XElement xe) { return XTypedServices.ToXTypedElement<HeartRateBelow_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HeartRateBelow_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HeartRate)
        /// </para>
        /// </summary>
        public HeartRateBelow_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HeartRate)
        /// </para>
        /// </summary>
        public virtual HeartRateValue_t HeartRate {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateValue_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HeartRateBelow_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeartRateBelow_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("HeartRate", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateValue_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Calories)
    /// </para>
    /// </summary>
    public partial class CaloriesBurned_t : global::Garmin.TrainingCenterDatabase.V2.Duration_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CaloriesBurned_t(XElement xe) { return XTypedServices.ToXTypedElement<CaloriesBurned_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CaloriesBurned_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Calories)
        /// </para>
        /// </summary>
        public CaloriesBurned_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Calories)
        /// </para>
        /// </summary>
        public virtual ushort Calories {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<ushort>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CaloriesBurned_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CaloriesBurned_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Calories", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(ushort));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class UserInitiated_t : global::Garmin.TrainingCenterDatabase.V2.Duration_t, IXMetaData {
        
		public static explicit operator UserInitiated_t(XElement xe) { return XTypedServices.ToXTypedElement<UserInitiated_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UserInitiated_t() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("UserInitiated_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserInitiated_t>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SpeedZone)
    /// </para>
    /// </summary>
    public partial class Speed_t : global::Garmin.TrainingCenterDatabase.V2.Target_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Speed_t(XElement xe) { return XTypedServices.ToXTypedElement<Speed_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Speed_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("SpeedZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SpeedZone)
        /// </para>
        /// </summary>
        public Speed_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SpeedZone)
        /// </para>
        /// </summary>
        public virtual Zone_t SpeedZone {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("SpeedZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Zone_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("SpeedZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Speed_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Speed_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("SpeedZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Zone_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HeartRateZone)
    /// </para>
    /// </summary>
    public partial class HeartRate_t : global::Garmin.TrainingCenterDatabase.V2.Target_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HeartRate_t(XElement xe) { return XTypedServices.ToXTypedElement<HeartRate_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HeartRate_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("HeartRateZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HeartRateZone)
        /// </para>
        /// </summary>
        public HeartRate_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HeartRateZone)
        /// </para>
        /// </summary>
        public virtual Zone_t HeartRateZone {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("HeartRateZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Zone_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("HeartRateZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HeartRate_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeartRate_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("HeartRateZone", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Zone_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Low, High)
    /// </para>
    /// </summary>
    public partial class Cadence_t : global::Garmin.TrainingCenterDatabase.V2.Target_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Cadence_t(XElement xe) { return XTypedServices.ToXTypedElement<Cadence_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Cadence_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Low, High)
        /// </para>
        /// </summary>
        public Cadence_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Low, High)
        /// </para>
        /// </summary>
        public virtual double Low {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Low, High)
        /// </para>
        /// </summary>
        public virtual double High {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Cadence_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Cadence_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class None_t : global::Garmin.TrainingCenterDatabase.V2.Target_t, IXMetaData {
        
		public static explicit operator None_t(XElement xe) { return XTypedServices.ToXTypedElement<None_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public None_t() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("None_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<None_t>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class Zone_t : XTypedElement, IXMetaData {
        
		public static explicit operator Zone_t(XElement xe) {  return (Zone_t)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Zone_t() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Zone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Number)
    /// </para>
    /// </summary>
    public partial class PredefinedSpeedZone_t : global::Garmin.TrainingCenterDatabase.V2.Zone_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PredefinedSpeedZone_t(XElement xe) { return XTypedServices.ToXTypedElement<PredefinedSpeedZone_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PredefinedSpeedZone_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Number)
        /// </para>
        /// </summary>
        public PredefinedSpeedZone_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Number)
        /// </para>
        /// </summary>
        public virtual decimal Number {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Number", global::Garmin.TrainingCenterDatabase.V2.SpeedZoneNumbers_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PredefinedSpeedZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PredefinedSpeedZone_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class SpeedZoneNumbers_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 10m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SpeedZoneNumbers_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ViewAs, LowInMetersPerSecond, HighInMetersPerSecond)
    /// </para>
    /// </summary>
    public partial class CustomSpeedZone_t : global::Garmin.TrainingCenterDatabase.V2.Zone_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CustomSpeedZone_t(XElement xe) { return XTypedServices.ToXTypedElement<CustomSpeedZone_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomSpeedZone_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("ViewAs", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("LowInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("HighInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ViewAs, LowInMetersPerSecond, HighInMetersPerSecond)
        /// </para>
        /// </summary>
        public CustomSpeedZone_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ViewAs, LowInMetersPerSecond, HighInMetersPerSecond)
        /// </para>
        /// </summary>
        public virtual string ViewAs {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ViewAs", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("ViewAs", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "ViewAs", global::Garmin.TrainingCenterDatabase.V2.SpeedType_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ViewAs, LowInMetersPerSecond, HighInMetersPerSecond)
        /// </para>
        /// </summary>
        public virtual double LowInMetersPerSecond {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("LowInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("LowInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "LowInMetersPerSecond", global::Garmin.TrainingCenterDatabase.V2.SpeedInMetersPerSecond_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ViewAs, LowInMetersPerSecond, HighInMetersPerSecond)
        /// </para>
        /// </summary>
        public virtual double HighInMetersPerSecond {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("HighInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("HighInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "HighInMetersPerSecond", global::Garmin.TrainingCenterDatabase.V2.SpeedInMetersPerSecond_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CustomSpeedZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomSpeedZone_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ViewAs", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("LowInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("HighInMetersPerSecond", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class SpeedInMetersPerSecond_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(512)), null, 0, 0, null, null, 0, 0D, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SpeedInMetersPerSecond_t() {
        }
    }
    
    public sealed class SpeedType_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Pace",
                        "Speed"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SpeedType_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Number)
    /// </para>
    /// </summary>
    public partial class PredefinedHeartRateZone_t : global::Garmin.TrainingCenterDatabase.V2.Zone_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PredefinedHeartRateZone_t(XElement xe) { return XTypedServices.ToXTypedElement<PredefinedHeartRateZone_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PredefinedHeartRateZone_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Number)
        /// </para>
        /// </summary>
        public PredefinedHeartRateZone_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Number)
        /// </para>
        /// </summary>
        public virtual decimal Number {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Number", global::Garmin.TrainingCenterDatabase.V2.HeartRateZoneNumbers_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PredefinedHeartRateZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PredefinedHeartRateZone_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Number", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class HeartRateZoneNumbers_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 5m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private HeartRateZoneNumbers_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Low, High)
    /// </para>
    /// </summary>
    public partial class CustomHeartRateZone_t : global::Garmin.TrainingCenterDatabase.V2.Zone_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CustomHeartRateZone_t(XElement xe) { return XTypedServices.ToXTypedElement<CustomHeartRateZone_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomHeartRateZone_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Low, High)
        /// </para>
        /// </summary>
        public CustomHeartRateZone_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Low, High)
        /// </para>
        /// </summary>
        public virtual HeartRateValue_t Low {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateValue_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Low, High)
        /// </para>
        /// </summary>
        public virtual HeartRateValue_t High {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateValue_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CustomHeartRateZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomHeartRateZone_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Low", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateValue_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("High", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateValue_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value)
    /// </para>
    /// </summary>
    public partial class HeartRateInBeatsPerMinute_t : global::Garmin.TrainingCenterDatabase.V2.HeartRateValue_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HeartRateInBeatsPerMinute_t(XElement xe) { return XTypedServices.ToXTypedElement<HeartRateInBeatsPerMinute_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HeartRateInBeatsPerMinute_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public HeartRateInBeatsPerMinute_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public virtual byte Value {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Value", global::Garmin.TrainingCenterDatabase.V2.positiveByte.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HeartRateInBeatsPerMinute_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeartRateInBeatsPerMinute_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(byte));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value)
    /// </para>
    /// </summary>
    public partial class HeartRateAsPercentOfMax_t : global::Garmin.TrainingCenterDatabase.V2.HeartRateValue_t, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HeartRateAsPercentOfMax_t(XElement xe) { return XTypedServices.ToXTypedElement<HeartRateAsPercentOfMax_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HeartRateAsPercentOfMax_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public HeartRateAsPercentOfMax_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public virtual byte Value {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Value", global::Garmin.TrainingCenterDatabase.V2.PercentOfMax_t.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HeartRateAsPercentOfMax_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeartRateAsPercentOfMax_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Value", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(byte));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class PercentOfMax_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 100, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private PercentOfMax_t() {
        }
    }
    
    public sealed class positiveByte {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private positiveByte() {
        }
    }
    
    public sealed class Gender_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Male",
                        "Female"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Gender_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CourseFolder, Extensions?)
    /// </para>
    /// </summary>
    public partial class Courses_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Courses_t(XElement xe) { return XTypedServices.ToXTypedElement<Courses_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Courses_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("CourseFolder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CourseFolder, Extensions?)
        /// </para>
        /// </summary>
        public Courses_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CourseFolder, Extensions?)
        /// </para>
        /// </summary>
        public virtual CourseFolder_t CourseFolder {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("CourseFolder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((CourseFolder_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("CourseFolder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CourseFolder, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Courses_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Courses_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CourseFolder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(CourseFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder*, CourseNameRef*, Notes?, Extensions?)
    /// </para>
    /// </summary>
    public partial class CourseFolder_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CourseFolder_t> FolderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NameKeyReference_t> CourseNameRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CourseFolder_t(XElement xe) { return XTypedServices.ToXTypedElement<CourseFolder_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CourseFolder_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("CourseNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder*, CourseNameRef*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public CourseFolder_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, CourseNameRef*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<CourseFolder_t> Folder {
            get {
                if ((this.FolderField == null)) {
                    this.FolderField = new XTypedList<CourseFolder_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.FolderField;
            }
            set {
                if ((value == null)) {
                    this.FolderField = null;
                }
                else {
                    if ((this.FolderField == null)) {
                        this.FolderField = XTypedList<CourseFolder_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<CourseFolder_t>(this.FolderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, CourseNameRef*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<NameKeyReference_t> CourseNameRef {
            get {
                if ((this.CourseNameRefField == null)) {
                    this.CourseNameRefField = new XTypedList<NameKeyReference_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("CourseNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.CourseNameRefField;
            }
            set {
                if ((value == null)) {
                    this.CourseNameRefField = null;
                }
                else {
                    if ((this.CourseNameRefField == null)) {
                        this.CourseNameRefField = XTypedList<NameKeyReference_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("CourseNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<NameKeyReference_t>(this.CourseNameRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, CourseNameRef*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder*, CourseNameRef*, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CourseFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CourseFolder_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Folder", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(CourseFolder_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CourseNameRef", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(NameKeyReference_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
    /// </para>
    /// </summary>
    public partial class Course_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CourseLap_t> LapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Track_t> TrackField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CoursePoint_t> CoursePointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Course_t(XElement xe) { return XTypedServices.ToXTypedElement<Course_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Course_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("CoursePoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public Course_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Name", global::Garmin.TrainingCenterDatabase.V2.RestrictedToken_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<CourseLap_t> Lap {
            get {
                if ((this.LapField == null)) {
                    this.LapField = new XTypedList<CourseLap_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.LapField;
            }
            set {
                if ((value == null)) {
                    this.LapField = null;
                }
                else {
                    if ((this.LapField == null)) {
                        this.LapField = XTypedList<CourseLap_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<CourseLap_t>(this.LapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<Track_t> Track {
            get {
                if ((this.TrackField == null)) {
                    this.TrackField = new XTypedList<Track_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.TrackField;
            }
            set {
                if ((value == null)) {
                    this.TrackField = null;
                }
                else {
                    if ((this.TrackField == null)) {
                        this.TrackField = XTypedList<Track_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<Track_t>(this.TrackField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual IList<CoursePoint_t> CoursePoint {
            get {
                if ((this.CoursePointField == null)) {
                    this.CoursePointField = new XTypedList<CoursePoint_t>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("CoursePoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                }
                return this.CoursePointField;
            }
            set {
                if ((value == null)) {
                    this.CoursePointField = null;
                }
                else {
                    if ((this.CoursePointField == null)) {
                        this.CoursePointField = XTypedList<CoursePoint_t>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("CoursePoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                    }
                    else {
                        XTypedServices.SetList<CoursePoint_t>(this.CoursePointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual AbstractSource_t Creator {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((AbstractSource_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Lap*, Track*, Notes?, CoursePoint*, Creator?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Course_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Course_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Lap", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(CourseLap_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Track", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Track_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CoursePoint", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(CoursePoint_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Creator", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(AbstractSource_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
    /// </para>
    /// </summary>
    public partial class CourseLap_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CourseLap_t(XElement xe) { return XTypedServices.ToXTypedElement<CourseLap_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CourseLap_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("BeginPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("BeginAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("EndPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("EndAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public CourseLap_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual double TotalTimeSeconds {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual double DistanceMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Position_t BeginPosition {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("BeginPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Position_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("BeginPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<double> BeginAltitudeMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("BeginAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("BeginAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Position_t EndPosition {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("EndPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Position_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("EndPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<double> EndAltitudeMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("EndAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("EndAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual HeartRateInBeatsPerMinute_t AverageHeartRateBpm {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateInBeatsPerMinute_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual HeartRateInBeatsPerMinute_t MaximumHeartRateBpm {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((HeartRateInBeatsPerMinute_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Intensity {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Intensity", global::Garmin.TrainingCenterDatabase.V2.Intensity_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<byte> Cadence {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Cadence", global::Garmin.TrainingCenterDatabase.V2.CadenceValue_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TotalTimeSeconds, DistanceMeters, BeginPosition?, BeginAltitudeMeters?, EndPosition?, EndAltitudeMeters?, AverageHeartRateBpm?, MaximumHeartRateBpm?, Intensity, Cadence?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CourseLap_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CourseLap_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("TotalTimeSeconds", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DistanceMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("BeginPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Position_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("BeginAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("EndPosition", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Position_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("EndAltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AverageHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateInBeatsPerMinute_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MaximumHeartRateBpm", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(HeartRateInBeatsPerMinute_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Intensity", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Cadence", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(byte));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
    /// </para>
    /// </summary>
    public partial class CoursePoint_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CoursePoint_t(XElement xe) { return XTypedServices.ToXTypedElement<CoursePoint_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CoursePoint_t() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("PointType", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public CoursePoint_t() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "Name", global::Garmin.TrainingCenterDatabase.V2.CoursePointName_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.DateTime Time {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Position_t Position {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Position_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<double> AltitudeMeters {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string PointType {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PointType", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("PointType", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, "PointType", global::Garmin.TrainingCenterDatabase.V2.CoursePointType_t.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual string Notes {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Time, Position, AltitudeMeters?, PointType, Notes?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"));
                return ((Extensions_t)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CoursePoint_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CoursePoint_t>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Name", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Time", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(System.DateTime));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Position", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Position_t));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AltitudeMeters", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(double));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PointType", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Notes", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Extensions", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(Extensions_t));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class CoursePointName_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(38)), null, 0, 0, null, null, 10, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CoursePointName_t() {
        }
    }
    
    public sealed class CoursePointType_t {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Generic",
                        "Summit",
                        "Valley",
                        "Water",
                        "Food",
                        "Danger",
                        "Left",
                        "Right",
                        "Straight",
                        "First Aid",
                        "4th Category",
                        "3rd Category",
                        "2nd Category",
                        "1st Category",
                        "Hors Category",
                        "Sprint"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CoursePointType_t() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class Extensions_t : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator Extensions_t(XElement xe) { return XTypedServices.ToXTypedElement<Extensions_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Extensions_t() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public Extensions_t() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Extensions_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Extensions_t>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##other", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    public partial class TrainingCenterDatabase : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TrainingCenterDatabase_t ContentField;
        
		public static explicit operator TrainingCenterDatabase(XElement xe) { return XTypedServices.ToXTypedElement<TrainingCenterDatabase, TrainingCenterDatabase_t>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TrainingCenterDatabase() {
            SetInnerType(new TrainingCenterDatabase_t());
        }
        
        public TrainingCenterDatabase(TrainingCenterDatabase_t content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual TrainingCenterDatabase_t Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Folders_t Folders {
            get {
                return this.ContentField.Folders;
            }
            set {
                this.ContentField.Folders = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual ActivityList_t Activities {
            get {
                return this.ContentField.Activities;
            }
            set {
                this.ContentField.Activities = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual WorkoutList_t Workouts {
            get {
                return this.ContentField.Workouts;
            }
            set {
                this.ContentField.Workouts = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual CourseList_t Courses {
            get {
                return this.ContentField.Courses;
            }
            set {
                this.ContentField.Courses = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual AbstractSource_t Author {
            get {
                return this.ContentField.Author;
            }
            set {
                this.ContentField.Author = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///You can extend Training Center by adding your own elements from another schema here.
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folders?, Activities?, Workouts?, Courses?, Author?, Extensions?)
        /// </para>
        /// </summary>
        public virtual Extensions_t Extensions {
            get {
                return this.ContentField.Extensions;
            }
            set {
                this.ContentField.Extensions = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("TrainingCenterDatabase", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TrainingCenterDatabase Load(string xmlFile) {
            return XTypedServices.Load<TrainingCenterDatabase, TrainingCenterDatabase_t>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TrainingCenterDatabase Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TrainingCenterDatabase, TrainingCenterDatabase_t>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TrainingCenterDatabase Parse(string xml) {
            return XTypedServices.Parse<TrainingCenterDatabase, TrainingCenterDatabase_t>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new TrainingCenterDatabase(((TrainingCenterDatabase_t)(this.Content.Clone())));
        }
        
        private void SetInnerType(TrainingCenterDatabase_t ContentField) {
            this.ContentField = ((TrainingCenterDatabase_t)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("TrainingCenterDatabase_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.TrainingCenterDatabase_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Folders_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Folders_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ActivityList_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.ActivityList_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WorkoutList_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.WorkoutList_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CourseList_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.CourseList_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("History_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.History_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ActivityReference_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.ActivityReference_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HistoryFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.HistoryFolder_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MultiSportFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.MultiSportFolder_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Week_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Week_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MultiSportSession_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.MultiSportSession_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FirstSport_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.FirstSport_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NextSport_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.NextSport_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Activity_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Activity_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbstractSource_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.AbstractSource_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Device_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Device_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Application_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Application_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Build_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Build_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Version_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Version_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Training_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Training_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QuickWorkout_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.QuickWorkout_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Plan_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Plan_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ActivityLap_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.ActivityLap_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Track_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Track_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Trackpoint_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Trackpoint_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Position_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Position_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Workouts_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Workouts_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NameKeyReference_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.NameKeyReference_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WorkoutFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.WorkoutFolder_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Workout_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Workout_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbstractStep_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.AbstractStep_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Repeat_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Repeat_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Step_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Step_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Duration_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Duration_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Target_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Target_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Time_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Time_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Distance_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Distance_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HeartRateAbove_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.HeartRateAbove_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HeartRateValue_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.HeartRateValue_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HeartRateBelow_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.HeartRateBelow_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CaloriesBurned_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.CaloriesBurned_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UserInitiated_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.UserInitiated_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Speed_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Speed_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HeartRate_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.HeartRate_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Cadence_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Cadence_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("None_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.None_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Zone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Zone_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PredefinedSpeedZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.PredefinedSpeedZone_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CustomSpeedZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.CustomSpeedZone_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PredefinedHeartRateZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.PredefinedHeartRateZone_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CustomHeartRateZone_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.CustomHeartRateZone_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HeartRateInBeatsPerMinute_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.HeartRateInBeatsPerMinute_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HeartRateAsPercentOfMax_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.HeartRateAsPercentOfMax_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Courses_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Courses_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CourseFolder_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.CourseFolder_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Course_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Course_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CourseLap_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.CourseLap_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CoursePoint_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.CoursePoint_t));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Extensions_t", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.Extensions_t));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("TrainingCenterDatabase", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"), typeof(global::Garmin.TrainingCenterDatabase.V2.TrainingCenterDatabase));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Garmin.TrainingCenterDatabase.V2.TrainingCenterDatabase), typeof(global::Garmin.TrainingCenterDatabase.V2.TrainingCenterDatabase_t));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("TrainingCenterDatabase", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public TrainingCenterDatabase TrainingCenterDatabase {  get {return rootObject as TrainingCenterDatabase; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(TrainingCenterDatabase root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Garmin.TrainingCenterDatabase.V2.TrainingCenterDatabase TrainingCenterDatabase {  get {return rootObject as global::Garmin.TrainingCenterDatabase.V2.TrainingCenterDatabase; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Garmin.TrainingCenterDatabase.V2.TrainingCenterDatabase root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
